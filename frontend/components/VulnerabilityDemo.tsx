"use client";

import { useState } from "react";
import { AlertTriangle, CheckCircle, Code, Terminal } from "lucide-react";
import { apiClient } from "@/lib/api";

interface VulnerabilityDemoProps {
  vulnerabilityId: string;
  title: string;
  description: string;
}

export default function VulnerabilityDemo({
  vulnerabilityId,
  title,
  description,
}: VulnerabilityDemoProps) {
  const [mode, setMode] = useState<"vulnerable" | "secure">("vulnerable");
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<any>(null);
  const [error, setError] = useState<string | null>(null);

  const handleTest = async (
    endpoint: string,
    method: string = "GET",
    data?: any
  ) => {
    setLoading(true);
    setError(null);
    setResult(null);

    try {
      const response = await apiClient.call(method, endpoint, data);
      setResult(response.data);
    } catch (err: any) {
      setError(err.response?.data?.error || err.message);
      setResult(err.response?.data);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      {/* Mode Toggle */}
      <div className="card">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-gray-900">
            Modo de Demostración
          </h3>
          <div className="inline-flex rounded-lg border border-gray-200 p-1">
            <button
              onClick={() => setMode("vulnerable")}
              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                mode === "vulnerable"
                  ? "bg-danger-600 text-white"
                  : "text-gray-600 hover:text-gray-900"
              }`}
            >
              <div className="flex items-center gap-2">
                <AlertTriangle className="w-4 h-4" />
                Vulnerable
              </div>
            </button>
            <button
              onClick={() => setMode("secure")}
              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                mode === "secure"
                  ? "bg-success-600 text-white"
                  : "text-gray-600 hover:text-gray-900"
              }`}
            >
              <div className="flex items-center gap-2">
                <CheckCircle className="w-4 h-4" />
                Seguro
              </div>
            </button>
          </div>
        </div>

        {mode === "vulnerable" ? (
          <div className="bg-danger-50 border border-danger-200 rounded-lg p-4">
            <div className="flex gap-3">
              <AlertTriangle className="w-5 h-5 text-danger-600 flex-shrink-0 mt-0.5" />
              <div>
                <h4 className="font-medium text-danger-900 mb-1">
                  Implementación Vulnerable
                </h4>
                <p className="text-sm text-danger-800">
                  Esta implementación contiene la vulnerabilidad y puede ser
                  explotada. Ideal para entender cómo funciona el ataque.
                </p>
              </div>
            </div>
          </div>
        ) : (
          <div className="bg-success-50 border border-success-200 rounded-lg p-4">
            <div className="flex gap-3">
              <CheckCircle className="w-5 h-5 text-success-600 flex-shrink-0 mt-0.5" />
              <div>
                <h4 className="font-medium text-success-900 mb-1">
                  Implementación Segura
                </h4>
                <p className="text-sm text-success-800">
                  Esta implementación sigue las mejores prácticas de seguridad y
                  mitiga la vulnerabilidad.
                </p>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Response Display */}
      {(result || error) && (
        <div className="card">
          <div className="flex items-center gap-2 mb-4">
            <Terminal className="w-5 h-5 text-gray-600" />
            <h3 className="text-lg font-semibold text-gray-900">
              Respuesta del Servidor
            </h3>
          </div>

          {error && (
            <div className="mb-4 p-4 bg-danger-50 border border-danger-200 rounded-lg">
              <p className="text-sm text-danger-800 font-medium">
                Error: {error}
              </p>
            </div>
          )}

          {result && (
            <pre className="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto text-sm">
              {JSON.stringify(result, null, 2)}
            </pre>
          )}
        </div>
      )}
    </div>
  );
}
